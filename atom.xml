<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞鱼的博客</title>
  
  <subtitle>Hexo站点</subtitle>
  <link href="https://blog.chaisz.com/atom.xml" rel="self"/>
  
  <link href="https://blog.chaisz.com/"/>
  <updated>2023-05-28T09:29:28.514Z</updated>
  <id>https://blog.chaisz.com/</id>
  
  <author>
    <name>飞鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS开发环境搭建</title>
    <link href="https://blog.chaisz.com/2023/05/28/iOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.chaisz.com/2023/05/28/iOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-05-28T16:48:40.000Z</published>
    <updated>2023-05-28T09:29:28.514Z</updated>
    
    <content type="html"><![CDATA[<p>本文原文来自<strong>林永坚</strong>老师的 <strong><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657#/content">iOS开发进阶</a></strong> 课程中的一节。</p><p>如果你想要成为一个iOS开发工程师，我个人建议你慎重考虑。如果你已经入行了，那祝你好运！</p><p>在 iOS 开发过程中，你是不是会经常遇到这些情况：</p><p>每次打开一个新项目，都需要手动搭建开发环境；有时候在安装第三方工具时使用到 sudo 权限，导致以后安装工具都需要手工输入密码而无法实施自动化。还有，每当启动一台新 CI 时，就需要手工登录并配置一遍，更可怕的是，原先搭建好的 CI 会随着 Xcode 版本更新需要重新配置。</p><p>为什么会这么麻烦呢？就是因为你在项目开始之初没有做好统一配置。</p><p>所谓统一配置，就是所有的配置信息都以文本的格式存放在 Git 里面，我们可以随时查看修改记录，以此来帮助我们比较不同配置之间的差异性，然后在这个基础上不断更新迭代。</p><p>可以说，有了统一配置，任何工程师都可以搭建出一模一样的开发环境，构建出功能一致的 App；有了统一配置，还可以让我们按需延展 CI 服务，而不用任何手工操作。更重要的是，它还可以应用到各个类似的 iOS 项目中，极大地减轻了项目前期的搭建成本。</p><p>既然统一的配置那么重要，那么我们怎样搭建统一配置的开发环境呢？</p><h3 id="Ruby-工具链"><a href="#Ruby-工具链" class="headerlink" title="Ruby 工具链"></a>Ruby 工具链</h3><p>我们可以通过 Ruby 工具链为整个项目搭建一致的开发和构建环境。为什么选择 Ruby 而不是其他语言环境呢？因为在 iOS 开发方面，目前流行的第三方工具 CocoaPods 和 fastlane 都是使用 Ruby 来开发的。特别是 Ruby 有非常成熟的依赖库管理工具 RubyGems 和 Bundler，其中 Bundler 可以帮我们有效地管理 CocoaPods 和 fastlane 的版本。</p><p>下面一起来看看怎样搭建一个统一的开发环境吧。<br><img src="/2023/05/28/iOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image1.png"></p><p>通常，统一的开发环境应该从操作系统开始。对于 iOS 开发来说，MacOS 是目前 iOS 开发唯一支持的操作系统。在公司，MacOS 的版本一般由 IT 部门统一管理和更新。要注意，当公司统一更新了我们开发环境的 MacOS 版本以后，需要同时更新 CI 上 MacOS 的版本，以保持一致。</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>位于 MacOS 上层的是 Xcode 和 rbenv。其中，Xcode 是 iOS 开发和构建工具，在同一个项目里，最好使用同一个版本的 Xcode 进行开发和构建，我们可以在项目的 README.md 文件标注 Xcode 的版本。</p><p>那我们怎样才能保证每个人都安装同一个版本号的 Xcode 呢？技巧就是我们不要到有自动更新功能的 Mac App Store 中下载 Xcode，而是到苹果的<a href="https://developer.apple.com/download/more/">开发者网站</a>搜索并下载。</p><p>有时候我们会同时开发多个项目，这样有可能要安装多个不同版本的 Xcode。如果你的机器有多于一个版本的 Xcode，此时需要特别注意，为了保证所使用的编译器版本一致，在每次执行自动化命令之前（如执行bundle exec fastlane test），要先使用xcode-select -s来选择该项目所对应版本的 Xcode。</p><h3 id="rbenv"><a href="#rbenv" class="headerlink" title="rbenv"></a>rbenv</h3><p>有了版本一致的 Xcode 以后，因为后期我们会用到 CocoaPods 等第三方 Ruby 工具，为了自动化安装和管理这些工具，整个项目团队所使用的 Ruby 版本也必须保持一致。为此，我们就需要用到 Ruby 环境管理工具。</p><p>目前流行的 Ruby 环境管理工具有 RVM 和 rbenv。我推荐使用的是 rbenv，因为它使用 shims 文件夹来分离各个 Ruby 版本，相对于 RVM 更加轻装而方便使用。千万注意，团队内部不要同时使用不同的 Ruby 环境管理工具，否则项目编译会出错。</p><p>rbenv 是 Ruby 环境管理工具，能够安装、管理、隔离以及在多个 Ruby 版本之间切换。要使用 rbenv，我们可以通过 Homebrew 来安装它，下面是安装 Homebrew 和 rbenv 的脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br><span class="line">brew install rbenv ruby-build rbenv-vars</span><br></pre></td></tr></table></figure><p>一旦安装 rbenv 完毕，我们需要把以下的设置信息放到你的 Shell 配置文件里面，例如 <code>~/.bash_profile</code> 或者 <code>~/.zshrc</code> 等文件，这样能保证每次打开终端的时候都会初始化 rbenv。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot; </span><br><span class="line">eval &quot;$(rbenv init -)&quot;</span><br></pre></td></tr></table></figure><p>接着我们就可以安装和设置项目的 Ruby 环境了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd $(PROJECT_DIR)</span><br><span class="line">$ rbenv install 2.7.1</span><br><span class="line">$ rbenv local 2.7.1</span><br></pre></td></tr></table></figure><p>此处是把项目的 Ruby 环境配置为 <code>2.7.1</code> 版本。rbenv 会帮我们建立 一个叫作<code>.ruby-version</code> 的文件，该文件里面只保存一个版本号（例如2.7.1）的字符串。这个包含了版本号的文件可以用 Git 进行管理。如果要更新版本，可以通过<code>rbenv local</code>命令进行，每次更新也由 Git 统一管理，这样就能让其他开发者使用同一版本的 Ruby 开发环境了。</p><h3 id="RubyGems-和-Bundler"><a href="#RubyGems-和-Bundler" class="headerlink" title="RubyGems 和 Bundler"></a>RubyGems 和 Bundler</h3><p>RubyGems 和 Bundler 主要是用来安装和管理 CocoaPods 和 fastlane 等第三方工具。</p><p>具体来说，RubyGems 是 Ruby 依赖包管理工具。在 Ruby 的世界，包叫作 Gem，我们可以通过<code>gem install</code>命令来安装。但是 RubyGems 在管理 Gem 版本的时候有些缺陷，就有人开发了 Bundler，用它来检查和安装 Gem 的特定版本，以此为 Ruby 项目提供一致性的环境。</p><p>要安装 Bundler，我们可执行<code>gem install bundler</code>命令进行，之后，再执行<code>bundle init</code>就可以生成一个 <code>Gemfile</code> 文件，像 CocoaPods 和 fastlane 等依赖包，我们就可以添加到这个文件里面。</p><p>具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &quot;https://rubygems.org&quot;</span><br><span class="line">gem &quot;cocoapods&quot;, &quot;1.10.0&quot;</span><br><span class="line">gem &quot;fastlane&quot;, &quot;2.166.0&quot;</span><br></pre></td></tr></table></figure><p>注意我们在gem命令里面都指定了依赖包的特定版本号。例如，在我们的 Moment App 就使用了<code>1.10.0</code>版的 CocoaPods，然后执行<code>bundle install</code>来安装各个 Gem。 Bundler 会自动生成一个 <code>Gemfile.lock</code> 文件来锁定所安装的 Gem 的版本，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEPENDENCIES</span><br><span class="line">  cocoapods (= 1.10.0)</span><br><span class="line">  fastlane (= 2.166.0)</span><br></pre></td></tr></table></figure><p>为了保证团队其他成员都可以使用版本号一致的 Gem，我们需要把 Gemfile 和 Gemfile.lock 一同保存到 Git 里面统一管理起来。</p><p>到此为止，我们已经知道怎样使用 Ruby 工具链配置一个统一的开发环境。但在真实的开发环境中，搭建环境只需要一个人来完成即可，其他成员执行以下脚本就能完成整套开发环境的搭建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./scripts/setup.sh</span><br></pre></td></tr></table></figure><p>我们一起看看这个脚本做了些什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Install ruby using rbenv</span><br><span class="line">ruby_version=`cat .ruby-version`</span><br><span class="line">if [[ ! -d &quot;$HOME/.rbenv/versions/$ruby_version&quot; ]]; then</span><br><span class="line">  rbenv install $ruby_version;</span><br><span class="line">fi</span><br><span class="line"># Install bunlder</span><br><span class="line">gem install bundler</span><br><span class="line"># Install all gems</span><br><span class="line">bundle install</span><br><span class="line"># Install all pods</span><br><span class="line">bundle exec pod install</span><br></pre></td></tr></table></figure><p>该脚本主要做了四件事情，第一步是在 rbenv 下安装特定版本的 Ruby 开发环境，然后通过 RubyGems 安装 Bunlder，接着使用 Bundler 安装 CocoaPods 和 fastlane 等依赖包，最后安装各个 Pod。这样，一个统一的项目环境就搭建完成了，接下来开发者就可以打开 <strong>Moments.xcworkspace</strong> 进行开发了。</p><p>说完 Ruby 环境搭建以后，最后我们一起聊聊保证项目文件一致性的 <code>.gitignore</code> 文件。</p><h3 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h3><p>.gitignore 文件是一个配置文件，用来指定让 Git 需要忽略的文件或者目录。如果没有 .gitignore 文件，项目成员可能会不小心把一些自动生成等无关重要的文件或者具有个人信息(例如 xcuserdata)的文件保存到 Git 里面。这就大大增加了查看 Git 修改历史的难度。因此，在项目初期就配置一个合适的 .gitignore 文件，能减轻后续的管理工作。</p><p>如何创建 .gitignore 文件呢？</p><p>我一般会在 <a href="https://www.toptal.com/developers/gitignore/">gitignore.io</a> 里面输入关键字，例如 Xcode，Swift 等，然后该网站会帮我们生成一个默认的 <code>.gitignore</code> 文件。咱们项目 Moments App 的 <code>.gitignore</code> 文件你可以到拉勾教育的仓库中查看。<br><img src="/2023/05/28/iOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image2.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上，我们通过 Xcode、rbenv、RubyGems 和 Bundler 搭建一个统一的 iOS 开发和构建环境。</p><p><img src="/2023/05/28/iOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image3.png"></p><p>再次强调下，为了让各个开发和构建环境能保持一致，我们要把 <code>.ruby-version</code>、 <code>Gemfile</code> 和 <code>Gemfile.lock</code> 文件通过 Git 统一管理起来，并共享给整个项目团队使用。</p><p>而且，由于我们的开发环境已经通过 Bundler 管理起来，今后，当使用各个 Gem 工具的时候，也需要使用 Bundler。例如在使用 CocoaPods 时要执行<code>bundle exec pod</code>，以保证我们使用的是项目级别而不是操作系统级别的 Gem 工具。</p><p>思考题：</p><blockquote><p>请问如果我们不使用 rbenv ，那我们使用的 Ruby 来自哪里？使用 CocoaPods 等工具又来自哪里？不同项目能使用不同版本的 CocoaPods 吗？</p></blockquote><p>你可以把回答写到下面的留言区哦，下一讲我将介绍如何使用 CocoaPods 统一依赖库的管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文原文来自&lt;strong&gt;林永坚&lt;/strong&gt;老师的 &lt;strong&gt;&lt;a href=&quot;https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657#/content&quot;&gt;iOS开发进阶&lt;/a&gt;&lt;/strong&gt; </summary>
      
    
    
    
    
    <category term="iOS" scheme="https://blog.chaisz.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Docker远程部署</title>
    <link href="https://blog.chaisz.com/2023/05/28/Docker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.chaisz.com/2023/05/28/Docker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/</id>
    <published>2023-05-28T11:51:11.000Z</published>
    <updated>2023-05-28T09:29:28.514Z</updated>
    
    <content type="html"><![CDATA[<p>Mac上使用Docker最简单的办法是安装Docker Desktop。</p><h3 id="macOS-Docker客户端安装。"><a href="#macOS-Docker客户端安装。" class="headerlink" title="macOS Docker客户端安装。"></a>macOS Docker客户端安装。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Install Docker CLI</span><br><span class="line">brew install docker</span><br><span class="line">brew install docker-compose</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-Docker开启2375端口，支持远程访问"><a href="#Ubuntu-Docker开启2375端口，支持远程访问" class="headerlink" title="Ubuntu Docker开启2375端口，支持远程访问"></a>Ubuntu Docker开启2375端口，支持远程访问</h3><ul><li>编辑<code>docker.service</code>文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li>ExecStart属性添加参数<code>-H tcp://0.0.0.0:2375</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure></li><li>重启<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li>测试是否开启成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:2375/version</span><br><span class="line"></span><br><span class="line">&#123;&quot;Platform&quot;:&#123;&quot;Name&quot;:&quot;Docker Engine - Community&quot;&#125;,&quot;Components&quot;:[&#123;&quot;Name&quot;:&quot;Engine&quot;,&quot;Version&quot;:&quot;20.10.11&quot;,&quot;Details&quot;:&#123;&quot;ApiVersion&quot;:&quot;1.41&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;BuildTime&quot;:&quot;2021-11-18T00:35:16.000000000+00:00&quot;,&quot;Experimental&quot;:&quot;false&quot;,&quot;GitCommit&quot;:&quot;847da18&quot;,&quot;GoVersion&quot;:&quot;go1.16.9&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-197-generic&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;Os&quot;:&quot;linux&quot;&#125;&#125;,&#123;&quot;Name&quot;:&quot;containerd&quot;,&quot;Version&quot;:&quot;1.4.12&quot;,&quot;Details&quot;:&#123;&quot;GitCommit&quot;:&quot;7b11cfaabd73bb80907dd23182b9347b4245eb5d&quot;&#125;&#125;,&#123;&quot;Name&quot;:&quot;runc&quot;,&quot;Version&quot;:&quot;1.0.2&quot;,&quot;Details&quot;:&#123;&quot;GitCommit&quot;:&quot;v1.0.2-0-g52b36a2&quot;&#125;&#125;,&#123;&quot;Name&quot;:&quot;docker-init&quot;,&quot;Version&quot;:&quot;0.19.0&quot;,&quot;Details&quot;:&#123;&quot;GitCommit&quot;:&quot;de40ad0&quot;&#125;&#125;],&quot;Version&quot;:&quot;20.10.11&quot;,&quot;ApiVersion&quot;:&quot;1.41&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;GitCommit&quot;:&quot;847da18&quot;,&quot;GoVersion&quot;:&quot;go1.16.9&quot;,&quot;Os&quot;:&quot;linux&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-197-generic&quot;,&quot;BuildTime&quot;:&quot;2021-11-18T00:35:16.000000000+00:00&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="macOS-配置Docker-Host"><a href="#macOS-配置Docker-Host" class="headerlink" title="macOS 配置Docker Host"></a>macOS 配置Docker Host</h3><ul><li>编辑<code>~/.zshrc</code>文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># NUC Docker</span><br><span class="line">export DOCKER_HOST=tcp://192.168.2.104:2375</span><br></pre></td></tr></table></figure></li><li>使修改生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>测试服务是否可用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">719385e32844: Pull complete </span><br><span class="line">Digest: sha256:fc6cf906cbfa013e80938cdf0bb199fbdbb86d6e3e013783e5a766f50f5dbce0</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure></li></ul><h3 id="在本机启动Ubuntu-Docker（可选）"><a href="#在本机启动Ubuntu-Docker（可选）" class="headerlink" title="在本机启动Ubuntu Docker（可选）"></a>在本机启动Ubuntu Docker（可选）</h3><ul><li>安装multipass虚拟机管理软件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask multipass</span><br></pre></td></tr></table></figure></li><li>创建Ubuntu虚拟机<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipass launch 20.04 --name my-docker -d 50G -m 2G</span><br></pre></td></tr></table></figure></li><li>在虚拟机中安装Docker<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipass shell my-docker</span><br><span class="line">&gt; curl -fsSL https://get.docker.com | sh</span><br></pre></td></tr></table></figure></li><li>编辑<code>docker.service</code>配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li>修改<code>ExecStart</code>添加<code>-H tcp://0.0.0.0</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0 --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure></li><li>重启<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl daemon-reload</span><br><span class="line">&gt; sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure></li><li>按<code>Ctrl+D</code>退出虚拟机</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://nemzes.net/posts/docker-mac-without-docker-desktop/">docker-mac-without-docker-desktop</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mac上使用Docker最简单的办法是安装Docker Desktop。&lt;/p&gt;
&lt;h3 id=&quot;macOS-Docker客户端安装。&quot;&gt;&lt;a href=&quot;#macOS-Docker客户端安装。&quot; class=&quot;headerlink&quot; title=&quot;macOS Docker</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://blog.chaisz.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>macOS常用开发工具</title>
    <link href="https://blog.chaisz.com/2023/05/28/macOS%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.chaisz.com/2023/05/28/macOS%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</id>
    <published>2023-05-28T11:49:48.000Z</published>
    <updated>2023-05-28T09:29:28.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac运行状态监控-iStat-Menus"><a href="#Mac运行状态监控-iStat-Menus" class="headerlink" title="Mac运行状态监控 iStat Menus"></a>Mac运行状态监控 <a href="https://bjango.com/mac/istatmenus/">iStat Menus</a></h3><blockquote><p>&#x2F;&#x2F; iStat Menus License<br>Email: <a href="mailto:&#57;&#56;&#50;&#48;&#x39;&#50;&#x33;&#51;&#50;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#57;&#56;&#50;&#48;&#x39;&#50;&#x33;&#51;&#50;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a><br>SN: GAWAE-FCWQ3-P8NYB-C7GF7-NEDRT-Q5DTB-MFZG6-6NEQC-CRMUD-8MZ2K-66SRB-SU8EW-EDLZ9-TGH3S-8SGA</p></blockquote><h3 id="Charles抓包工具"><a href="#Charles抓包工具" class="headerlink" title="Charles抓包工具"></a><a href="https://www.charlesproxy.com/">Charles</a>抓包工具</h3><blockquote><p>&#x2F;&#x2F; Charles Proxy License<br>Registered Name: <a href="https://zhile.io/">https://zhile.io</a><br>License Key: 48891cf209c6d32bf4</p></blockquote><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a><a href="">Sublime Text</a></h3><p><a href="https://gist.github.com/opastorello/4d494d627ec9012367028c89cb7a1945">sublime text 4143 license key</a><br>Mac 下使用Hex Fiend修改sublime_text二进制文件</p><blockquote><ul><li>Go to <a href="https://hexed.it/">hexed.it</a></li><li>Click “Open File” and choose your sublime_text.exe <strong>(DON’T FORGET TO BACKUP YOUR EXE FILE)</strong></li><li>Go to Search and in “Search for” put: 80 78 05 00 0F 94 C1</li><li>In Search Type select “Enable replace” and put: 80 78 05 00 0F 94 C1</li><li>Click “Find next” then “Replace”</li><li>Do the same thing with: C6 40 05 01 48 85 C9 &#x3D;&gt; C6 40 05 01 48 85 C9</li><li>Click “Save as” then name it: sublime_text</li><li>Copy your modified sublime_text.exe to directory Sublime Text</li><li>codesign –remove-signature &#x2F;Applications&#x2F;Sublime\ Text.app&#x2F;</li></ul></blockquote><h3 id="Sketch"><a href="#Sketch" class="headerlink" title="Sketch"></a><a href="https://xclient.info/s/sketch.html">Sketch</a></h3><p>文件打不开解决办法，使用盗版有风险，经常使用的话建议支持一下正版。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo codesign -f -s - /Applications/Sketch.app/Contents/MacOS/Sketch</span><br></pre></td></tr></table></figure><h3 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a><a href="https://macdown.uranusjr.com/">MacDown</a></h3><p>专为Mac打造的Markdown编辑器，体积小巧，运行速度快。</p><h3 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a><a href="https://iina.io/">IINA</a></h3><p>Mac上最好用的播放器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mac运行状态监控-iStat-Menus&quot;&gt;&lt;a href=&quot;#Mac运行状态监控-iStat-Menus&quot; class=&quot;headerlink&quot; title=&quot;Mac运行状态监控 iStat Menus&quot;&gt;&lt;/a&gt;Mac运行状态监控 &lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="macOS" scheme="https://blog.chaisz.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS开发环境搭建</title>
    <link href="https://blog.chaisz.com/2023/05/28/macOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.chaisz.com/2023/05/28/macOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-05-28T11:49:01.000Z</published>
    <updated>2023-05-28T09:29:28.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/">Homebrew</a></h3><ul><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a><a href="https://github.com/nvm-sh/nvm">nvm</a></h3><ul><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm -h</span><br></pre></td></tr></table></figure></li></ul><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a><a href="https://github.com/pyenv/pyenv">pyenv</a></h3><ul><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure></li></ul><h3 id="rbenv"><a href="#rbenv" class="headerlink" title="rbenv"></a><a href="https://github.com/rbenv/rbenv">rbenv</a></h3><ul><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rbenv ruby-build rbenv-vars</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;figure</summary>
      
    
    
    
    
    <category term="macOS" scheme="https://blog.chaisz.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS终端美化</title>
    <link href="https://blog.chaisz.com/2023/05/28/macOS%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    <id>https://blog.chaisz.com/2023/05/28/macOS%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</id>
    <published>2023-05-28T11:48:22.000Z</published>
    <updated>2023-05-28T09:29:28.522Z</updated>
    
    <content type="html"><![CDATA[<p>随着官方版本的更新，在你看到这篇文章时，有些配置可能已经过时。请以官方文档为准。</p><h3 id="安装-Oh-My-ZSH"><a href="#安装-Oh-My-ZSH" class="headerlink" title="安装 Oh My ZSH"></a>安装 <a href="https://ohmyz.sh/">Oh My ZSH</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>禁用自动更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zstyle &#x27;:omz:update&#x27; mode disabled </span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">zsh-syntax-highlighting</a></h4><ul><li>克隆插件到本地<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li>修改 <code>~/.zshrc</code> 文件，添加插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=( [plugins...] zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure></li><li>使修改生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h4 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">zsh-autosuggestions</a></h4><ul><li>克隆插件到本地<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li>修改 <code>~/.zshrc</code> 文件，添加插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">    # other plugins...</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>使修改生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h4 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sublime">sublime</a></h4><ul><li>修改 <code>~/.zshrc</code> 文件，添加插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(... sublime)</span><br></pre></td></tr></table></figure></li><li>使修改生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h3 id="powerlevel10k主题"><a href="#powerlevel10k主题" class="headerlink" title="powerlevel10k主题"></a><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>主题</h3><ul><li><p>克隆到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置 <code>~/.zshrc</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs) # 配置左侧图标</span><br></pre></td></tr></table></figure></li><li><p>下载字体文件<br><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a><br><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a><br><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf">MesloLGS NF Italic.ttf</a><br><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></p></li><li><p>双击下载好的文件完成安装</p></li><li><p>配置终端字体为<code>MesloLGS NF</code></p></li><li><p>使主题修改生效, 在执行这个之前需要配置好字体。不然在<code>powerlevel10k</code>引导配置时，图标显示会乱码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改终端配色iTerm2-Color-Schemes"><a href="#修改终端配色iTerm2-Color-Schemes" class="headerlink" title="修改终端配色iTerm2-Color-Schemes"></a>修改终端配色<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a></h3><ul><li>克隆仓库到本地<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git</span><br></pre></td></tr></table></figure></li><li>导入<code>iTerm2-Color-Schemes</code>主题文件, Mac 终端选择 <code>terminal</code> 文件夹下的文件。<br><img src="/2023/05/28/macOS%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/image1.png"></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a><br><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a><br><a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a><br><a href="https://sspai.com/post/53008">10 个 Terminal 主题，让你的 macOS 终端更好看</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着官方版本的更新，在你看到这篇文章时，有些配置可能已经过时。请以官方文档为准。&lt;/p&gt;
&lt;h3 id=&quot;安装-Oh-My-ZSH&quot;&gt;&lt;a href=&quot;#安装-Oh-My-ZSH&quot; class=&quot;headerlink&quot; title=&quot;安装 Oh My ZSH&quot;&gt;&lt;/a&gt;安装</summary>
      
    
    
    
    
    <category term="macOS" scheme="https://blog.chaisz.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS系统降级</title>
    <link href="https://blog.chaisz.com/2023/05/28/macOS%E7%B3%BB%E7%BB%9F%E9%99%8D%E7%BA%A7/"/>
    <id>https://blog.chaisz.com/2023/05/28/macOS%E7%B3%BB%E7%BB%9F%E9%99%8D%E7%BA%A7/</id>
    <published>2023-05-28T11:47:37.000Z</published>
    <updated>2023-05-28T09:29:28.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="macOS系统下载"><a href="#macOS系统下载" class="headerlink" title="macOS系统下载"></a>macOS系统下载</h3><ul><li><a href="https://apps.apple.com/app/macos-ventura/id1638787999?mt=12">macOS Ventura</a></li><li><a href="https://apps.apple.com/cn/app/macos-monterey/id1576738294?mt=12">macOS Monterey</a></li><li><a href="http://apps.apple.com/cn/app/macos-big-sur/id1526878132?mt=12">macOS Big Sur</a></li><li><a href="https://apps.apple.com/cn/app/macos-catalina/id1466841314?mt=12">macOS Catalina</a></li><li><a href="https://apps.apple.com/cn/app/macos-mojave/id1398502828?mt=12">macOS Mojave</a></li><li><a href="https://apps.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12">macOS High Sierra</a></li></ul><h3 id="macOS-系统安装盘制作"><a href="#macOS-系统安装盘制作" class="headerlink" title="macOS 系统安装盘制作"></a>macOS 系统安装盘制作</h3><ul><li><p>Ventura</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure></li><li><p>Monterey</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure></li><li><p>Big Sur</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Big\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure></li><li><p>Catalina</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure></li><li><p>Mojave</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure></li><li><p>High Sierra</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://support.apple.com/zh-cn/HT211683">如何下载 macOS</a><br><a href="https://support.apple.com/zh-cn/HT201372">创建可引导的 macOS 安装器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;macOS系统下载&quot;&gt;&lt;a href=&quot;#macOS系统下载&quot; class=&quot;headerlink&quot; title=&quot;macOS系统下载&quot;&gt;&lt;/a&gt;macOS系统下载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://apps.apple.com/app/</summary>
      
    
    
    
    
    <category term="macOS" scheme="https://blog.chaisz.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>在不受支持的Mac上安装macOS Ventura</title>
    <link href="https://blog.chaisz.com/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/"/>
    <id>https://blog.chaisz.com/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/</id>
    <published>2023-05-28T11:45:02.000Z</published>
    <updated>2023-05-28T09:29:28.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用OpenCore-Legacy-Patcher在MacBookPro2016安装macOS-Ventura"><a href="#使用OpenCore-Legacy-Patcher在MacBookPro2016安装macOS-Ventura" class="headerlink" title="使用OpenCore-Legacy-Patcher在MacBookPro2016安装macOS Ventura"></a>使用<a href="https://github.com/dortania/OpenCore-Legacy-Patcher">OpenCore-Legacy-Patcher</a>在MacBookPro2016安装macOS Ventura</h3><p>OpenCore 是一个复杂的引导加载程序，可以用来做黑苹果的启动引导。也可以使用它在旧Mac上安装新系统。更多信息请查看<a href="https://dortania.github.io/OpenCore-Legacy-Patcher/">官方文档</a></p><h3 id="系统安装盘制作"><a href="#系统安装盘制作" class="headerlink" title="系统安装盘制作"></a>系统安装盘制作</h3><p><img src="/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/image1.png"><br>如图所示，选择 Create macOS Installer 然后按照引导选择制作macOS安装盘。</p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>安装盘制作完成后会引导你重新启动。重启后按Option键，选择从U盘启动。然后就可以安装macOS Ventura了。在安装过程中会重新启动多次，请耐心等待。注意系统安装完成前不要拔掉U盘。</p><h3 id="安装补丁"><a href="#安装补丁" class="headerlink" title="安装补丁"></a>安装补丁</h3><p>到这一步已经进入系统了。只是还有些驱动不太正常。比如说闪屏，睡眠无法唤醒等。我们需要安装补丁，按下图选择完成操作。<br><img src="/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/image2.png"></p><h3 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h3><p>我们还需要最后一步，安装引导。这样拔掉U盘后也能正常进入系统。选择下边的选项完成安装。<br><img src="/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/image3.png"></p><p>自定义设置，如果想要无感知的进入系统。可以把 Show OpenCore Boot Picker 这个选项关掉。然后再重新安装引导。上边的Target Model可以根据自己的机型选择。如不知道该选哪个可以查看<a href="https://dortania.github.io/OpenCore-Legacy-Patcher/VENTURA-DROP.html">这个文档</a><br><img src="/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/image4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用OpenCore-Legacy-Patcher在MacBookPro2016安装macOS-Ventura&quot;&gt;&lt;a href=&quot;#使用OpenCore-Legacy-Patcher在MacBookPro2016安装macOS-Ventura&quot; class=&quot;h</summary>
      
    
    
    
    <category term="系统安装" scheme="https://blog.chaisz.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="macOS" scheme="https://blog.chaisz.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://blog.chaisz.com/2022/11/30/%E5%9B%BE/"/>
    <id>https://blog.chaisz.com/2022/11/30/%E5%9B%BE/</id>
    <published>2022-11-30T16:53:17.000Z</published>
    <updated>2023-05-28T09:29:28.526Z</updated>
    
    
    
    
    <category term="数据结构" scheme="https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="图" scheme="https://blog.chaisz.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://blog.chaisz.com/2022/11/30/%E6%A0%91/"/>
    <id>https://blog.chaisz.com/2022/11/30/%E6%A0%91/</id>
    <published>2022-11-30T16:53:11.000Z</published>
    <updated>2023-05-28T09:29:28.534Z</updated>
    
    
    
    
    <category term="数据结构" scheme="https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="树" scheme="https://blog.chaisz.com/tags/%E6%A0%91/"/>
    
    <category term="二叉树" scheme="https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="二叉排序树" scheme="https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
    
    <category term="二叉平衡树" scheme="https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="红黑树" scheme="https://blog.chaisz.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="B+树" scheme="https://blog.chaisz.com/tags/B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://blog.chaisz.com/2022/11/30/%E9%98%9F%E5%88%97/"/>
    <id>https://blog.chaisz.com/2022/11/30/%E9%98%9F%E5%88%97/</id>
    <published>2022-11-30T16:52:45.000Z</published>
    <updated>2023-05-28T09:29:28.534Z</updated>
    
    
    
    
    <category term="数据结构" scheme="https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="队列" scheme="https://blog.chaisz.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://blog.chaisz.com/2022/11/30/%E6%A0%88/"/>
    <id>https://blog.chaisz.com/2022/11/30/%E6%A0%88/</id>
    <published>2022-11-30T16:52:26.000Z</published>
    <updated>2023-05-28T09:29:28.534Z</updated>
    
    
    
    
    <category term="数据结构" scheme="https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈" scheme="https://blog.chaisz.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="https://blog.chaisz.com/2022/11/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://blog.chaisz.com/2022/11/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2022-11-30T16:52:07.000Z</published>
    <updated>2023-05-28T09:29:28.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表定义"><a href="#线性表定义" class="headerlink" title="线性表定义"></a>线性表定义</h2><p>线性表是一种线性数据结构，其特点是数据元素之间存在“一对一”的关系。在一个线性表中每个数据元素的类型都是相通的，即线性表是由同一类型的数据元素构成的线性结构。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表定义&quot;&gt;&lt;a href=&quot;#线性表定义&quot; class=&quot;headerlink&quot; title=&quot;线性表定义&quot;&gt;&lt;/a&gt;线性表定义&lt;/h2&gt;&lt;p&gt;线性表是一种线性数据结构，其特点是数据元素之间存在“一对一”的关系。在一个线性表中每个数据元素的类型都是相通的，即线</summary>
      
    
    
    
    <category term="数据结构" scheme="https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数组" scheme="https://blog.chaisz.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="链表" scheme="https://blog.chaisz.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="双向链表" scheme="https://blog.chaisz.com/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
    <category term="循环链表" scheme="https://blog.chaisz.com/tags/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    
    <category term="哈希表" scheme="https://blog.chaisz.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
</feed>
