{"meta":{"title":"飞鱼的博客","subtitle":"Hexo站点","description":"个人博客","author":"飞鱼","url":"https://blog.chaisz.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-05-28T09:29:28.514Z","updated":"2023-05-28T09:29:28.514Z","comments":false,"path":"/404.html","permalink":"https://blog.chaisz.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2023-05-28T09:29:28.534Z","updated":"2023-05-28T09:29:28.534Z","comments":false,"path":"about/index.html","permalink":"https://blog.chaisz.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2023-05-28T09:29:28.534Z","updated":"2023-05-28T09:29:28.534Z","comments":false,"path":"categories/index.html","permalink":"https://blog.chaisz.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-05-28T09:29:28.534Z","updated":"2023-05-28T09:29:28.534Z","comments":false,"path":"tags/index.html","permalink":"https://blog.chaisz.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"iOS开发环境搭建","slug":"iOS开发环境搭建","date":"2023-05-28T16:48:40.000Z","updated":"2023-05-28T09:29:28.514Z","comments":true,"path":"2023/05/28/iOS开发环境搭建/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/iOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"本文原文来自林永坚老师的 iOS开发进阶 课程中的一节。 如果你想要成为一个iOS开发工程师，我个人建议你慎重考虑。如果你已经入行了，那祝你好运！ 在 iOS 开发过程中，你是不是会经常遇到这些情况： 每次打开一个新项目，都需要手动搭建开发环境；有时候在安装第三方工具时使用到 sudo 权限，导致以后安装工具都需要手工输入密码而无法实施自动化。还有，每当启动一台新 CI 时，就需要手工登录并配置一遍，更可怕的是，原先搭建好的 CI 会随着 Xcode 版本更新需要重新配置。 为什么会这么麻烦呢？就是因为你在项目开始之初没有做好统一配置。 所谓统一配置，就是所有的配置信息都以文本的格式存放在 Git 里面，我们可以随时查看修改记录，以此来帮助我们比较不同配置之间的差异性，然后在这个基础上不断更新迭代。 可以说，有了统一配置，任何工程师都可以搭建出一模一样的开发环境，构建出功能一致的 App；有了统一配置，还可以让我们按需延展 CI 服务，而不用任何手工操作。更重要的是，它还可以应用到各个类似的 iOS 项目中，极大地减轻了项目前期的搭建成本。 既然统一的配置那么重要，那么我们怎样搭建统一配置的开发环境呢？ Ruby 工具链我们可以通过 Ruby 工具链为整个项目搭建一致的开发和构建环境。为什么选择 Ruby 而不是其他语言环境呢？因为在 iOS 开发方面，目前流行的第三方工具 CocoaPods 和 fastlane 都是使用 Ruby 来开发的。特别是 Ruby 有非常成熟的依赖库管理工具 RubyGems 和 Bundler，其中 Bundler 可以帮我们有效地管理 CocoaPods 和 fastlane 的版本。 下面一起来看看怎样搭建一个统一的开发环境吧。 通常，统一的开发环境应该从操作系统开始。对于 iOS 开发来说，MacOS 是目前 iOS 开发唯一支持的操作系统。在公司，MacOS 的版本一般由 IT 部门统一管理和更新。要注意，当公司统一更新了我们开发环境的 MacOS 版本以后，需要同时更新 CI 上 MacOS 的版本，以保持一致。 Xcode位于 MacOS 上层的是 Xcode 和 rbenv。其中，Xcode 是 iOS 开发和构建工具，在同一个项目里，最好使用同一个版本的 Xcode 进行开发和构建，我们可以在项目的 README.md 文件标注 Xcode 的版本。 那我们怎样才能保证每个人都安装同一个版本号的 Xcode 呢？技巧就是我们不要到有自动更新功能的 Mac App Store 中下载 Xcode，而是到苹果的开发者网站搜索并下载。 有时候我们会同时开发多个项目，这样有可能要安装多个不同版本的 Xcode。如果你的机器有多于一个版本的 Xcode，此时需要特别注意，为了保证所使用的编译器版本一致，在每次执行自动化命令之前（如执行bundle exec fastlane test），要先使用xcode-select -s来选择该项目所对应版本的 Xcode。 rbenv有了版本一致的 Xcode 以后，因为后期我们会用到 CocoaPods 等第三方 Ruby 工具，为了自动化安装和管理这些工具，整个项目团队所使用的 Ruby 版本也必须保持一致。为此，我们就需要用到 Ruby 环境管理工具。 目前流行的 Ruby 环境管理工具有 RVM 和 rbenv。我推荐使用的是 rbenv，因为它使用 shims 文件夹来分离各个 Ruby 版本，相对于 RVM 更加轻装而方便使用。千万注意，团队内部不要同时使用不同的 Ruby 环境管理工具，否则项目编译会出错。 rbenv 是 Ruby 环境管理工具，能够安装、管理、隔离以及在多个 Ruby 版本之间切换。要使用 rbenv，我们可以通过 Homebrew 来安装它，下面是安装 Homebrew 和 rbenv 的脚本。 12$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;brew install rbenv ruby-build rbenv-vars 一旦安装 rbenv 完毕，我们需要把以下的设置信息放到你的 Shell 配置文件里面，例如 ~/.bash_profile 或者 ~/.zshrc 等文件，这样能保证每次打开终端的时候都会初始化 rbenv。 12export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot; eval &quot;$(rbenv init -)&quot; 接着我们就可以安装和设置项目的 Ruby 环境了。 123$ cd $(PROJECT_DIR)$ rbenv install 2.7.1$ rbenv local 2.7.1 此处是把项目的 Ruby 环境配置为 2.7.1 版本。rbenv 会帮我们建立 一个叫作.ruby-version 的文件，该文件里面只保存一个版本号（例如2.7.1）的字符串。这个包含了版本号的文件可以用 Git 进行管理。如果要更新版本，可以通过rbenv local命令进行，每次更新也由 Git 统一管理，这样就能让其他开发者使用同一版本的 Ruby 开发环境了。 RubyGems 和 BundlerRubyGems 和 Bundler 主要是用来安装和管理 CocoaPods 和 fastlane 等第三方工具。 具体来说，RubyGems 是 Ruby 依赖包管理工具。在 Ruby 的世界，包叫作 Gem，我们可以通过gem install命令来安装。但是 RubyGems 在管理 Gem 版本的时候有些缺陷，就有人开发了 Bundler，用它来检查和安装 Gem 的特定版本，以此为 Ruby 项目提供一致性的环境。 要安装 Bundler，我们可执行gem install bundler命令进行，之后，再执行bundle init就可以生成一个 Gemfile 文件，像 CocoaPods 和 fastlane 等依赖包，我们就可以添加到这个文件里面。 具体代码如下： 123source &quot;https://rubygems.org&quot;gem &quot;cocoapods&quot;, &quot;1.10.0&quot;gem &quot;fastlane&quot;, &quot;2.166.0&quot; 注意我们在gem命令里面都指定了依赖包的特定版本号。例如，在我们的 Moment App 就使用了1.10.0版的 CocoaPods，然后执行bundle install来安装各个 Gem。 Bundler 会自动生成一个 Gemfile.lock 文件来锁定所安装的 Gem 的版本，例如： 123DEPENDENCIES cocoapods (= 1.10.0) fastlane (= 2.166.0) 为了保证团队其他成员都可以使用版本号一致的 Gem，我们需要把 Gemfile 和 Gemfile.lock 一同保存到 Git 里面统一管理起来。 到此为止，我们已经知道怎样使用 Ruby 工具链配置一个统一的开发环境。但在真实的开发环境中，搭建环境只需要一个人来完成即可，其他成员执行以下脚本就能完成整套开发环境的搭建。 1$ ./scripts/setup.sh 我们一起看看这个脚本做了些什么？ 1234567891011# Install ruby using rbenvruby_version=`cat .ruby-version`if [[ ! -d &quot;$HOME/.rbenv/versions/$ruby_version&quot; ]]; then rbenv install $ruby_version;fi# Install bunldergem install bundler# Install all gemsbundle install# Install all podsbundle exec pod install 该脚本主要做了四件事情，第一步是在 rbenv 下安装特定版本的 Ruby 开发环境，然后通过 RubyGems 安装 Bunlder，接着使用 Bundler 安装 CocoaPods 和 fastlane 等依赖包，最后安装各个 Pod。这样，一个统一的项目环境就搭建完成了，接下来开发者就可以打开 Moments.xcworkspace 进行开发了。 说完 Ruby 环境搭建以后，最后我们一起聊聊保证项目文件一致性的 .gitignore 文件。 .gitignore 文件.gitignore 文件是一个配置文件，用来指定让 Git 需要忽略的文件或者目录。如果没有 .gitignore 文件，项目成员可能会不小心把一些自动生成等无关重要的文件或者具有个人信息(例如 xcuserdata)的文件保存到 Git 里面。这就大大增加了查看 Git 修改历史的难度。因此，在项目初期就配置一个合适的 .gitignore 文件，能减轻后续的管理工作。 如何创建 .gitignore 文件呢？ 我一般会在 gitignore.io 里面输入关键字，例如 Xcode，Swift 等，然后该网站会帮我们生成一个默认的 .gitignore 文件。咱们项目 Moments App 的 .gitignore 文件你可以到拉勾教育的仓库中查看。 总结以上，我们通过 Xcode、rbenv、RubyGems 和 Bundler 搭建一个统一的 iOS 开发和构建环境。 再次强调下，为了让各个开发和构建环境能保持一致，我们要把 .ruby-version、 Gemfile 和 Gemfile.lock 文件通过 Git 统一管理起来，并共享给整个项目团队使用。 而且，由于我们的开发环境已经通过 Bundler 管理起来，今后，当使用各个 Gem 工具的时候，也需要使用 Bundler。例如在使用 CocoaPods 时要执行bundle exec pod，以保证我们使用的是项目级别而不是操作系统级别的 Gem 工具。 思考题： 请问如果我们不使用 rbenv ，那我们使用的 Ruby 来自哪里？使用 CocoaPods 等工具又来自哪里？不同项目能使用不同版本的 CocoaPods 吗？ 你可以把回答写到下面的留言区哦，下一讲我将介绍如何使用 CocoaPods 统一依赖库的管理。","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.chaisz.com/tags/iOS/"}]},{"title":"Docker远程部署","slug":"Docker远程部署","date":"2023-05-28T11:51:11.000Z","updated":"2023-05-28T09:29:28.514Z","comments":true,"path":"2023/05/28/Docker远程部署/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/Docker%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/","excerpt":"","text":"Mac上使用Docker最简单的办法是安装Docker Desktop。 macOS Docker客户端安装。123# Install Docker CLIbrew install dockerbrew install docker-compose Ubuntu Docker开启2375端口，支持远程访问 编辑docker.service文件1vim /lib/systemd/system/docker.service ExecStart属性添加参数-H tcp://0.0.0.0:23751ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 重启12systemctl daemon-reloadsystemctl restart docker 测试是否开启成功123curl http://localhost:2375/version&#123;&quot;Platform&quot;:&#123;&quot;Name&quot;:&quot;Docker Engine - Community&quot;&#125;,&quot;Components&quot;:[&#123;&quot;Name&quot;:&quot;Engine&quot;,&quot;Version&quot;:&quot;20.10.11&quot;,&quot;Details&quot;:&#123;&quot;ApiVersion&quot;:&quot;1.41&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;BuildTime&quot;:&quot;2021-11-18T00:35:16.000000000+00:00&quot;,&quot;Experimental&quot;:&quot;false&quot;,&quot;GitCommit&quot;:&quot;847da18&quot;,&quot;GoVersion&quot;:&quot;go1.16.9&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-197-generic&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;Os&quot;:&quot;linux&quot;&#125;&#125;,&#123;&quot;Name&quot;:&quot;containerd&quot;,&quot;Version&quot;:&quot;1.4.12&quot;,&quot;Details&quot;:&#123;&quot;GitCommit&quot;:&quot;7b11cfaabd73bb80907dd23182b9347b4245eb5d&quot;&#125;&#125;,&#123;&quot;Name&quot;:&quot;runc&quot;,&quot;Version&quot;:&quot;1.0.2&quot;,&quot;Details&quot;:&#123;&quot;GitCommit&quot;:&quot;v1.0.2-0-g52b36a2&quot;&#125;&#125;,&#123;&quot;Name&quot;:&quot;docker-init&quot;,&quot;Version&quot;:&quot;0.19.0&quot;,&quot;Details&quot;:&#123;&quot;GitCommit&quot;:&quot;de40ad0&quot;&#125;&#125;],&quot;Version&quot;:&quot;20.10.11&quot;,&quot;ApiVersion&quot;:&quot;1.41&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;GitCommit&quot;:&quot;847da18&quot;,&quot;GoVersion&quot;:&quot;go1.16.9&quot;,&quot;Os&quot;:&quot;linux&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-197-generic&quot;,&quot;BuildTime&quot;:&quot;2021-11-18T00:35:16.000000000+00:00&quot;&#125; macOS 配置Docker Host 编辑~/.zshrc文件12# NUC Dockerexport DOCKER_HOST=tcp://192.168.2.104:2375 使修改生效1source ~/.zshrc 测试服务是否可用12345678910111213141516171819202122232425262728docker run hello-worldUnable to find image &#x27;hello-world:latest&#x27; locallylatest: Pulling from library/hello-world719385e32844: Pull complete Digest: sha256:fc6cf906cbfa013e80938cdf0bb199fbdbb86d6e3e013783e5a766f50f5dbce0Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 在本机启动Ubuntu Docker（可选） 安装multipass虚拟机管理软件1brew install --cask multipass 创建Ubuntu虚拟机1multipass launch 20.04 --name my-docker -d 50G -m 2G 在虚拟机中安装Docker12multipass shell my-docker&gt; curl -fsSL https://get.docker.com | sh 编辑docker.service配置1sudo vim /lib/systemd/system/docker.service 修改ExecStart添加-H tcp://0.0.0.01ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0 --containerd=/run/containerd/containerd.sock 重启12&gt; sudo systemctl daemon-reload&gt; sudo systemctl restart docker.service 按Ctrl+D退出虚拟机 参考docker-mac-without-docker-desktop","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.chaisz.com/tags/Docker/"}]},{"title":"macOS常用开发工具","slug":"macOS常用开发工具","date":"2023-05-28T11:49:48.000Z","updated":"2023-05-28T09:29:28.522Z","comments":true,"path":"2023/05/28/macOS常用开发工具/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/macOS%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/","excerpt":"","text":"Mac运行状态监控 iStat Menus &#x2F;&#x2F; iStat Menus LicenseEmail: &#57;&#56;&#50;&#48;&#x39;&#50;&#x33;&#51;&#50;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;SN: GAWAE-FCWQ3-P8NYB-C7GF7-NEDRT-Q5DTB-MFZG6-6NEQC-CRMUD-8MZ2K-66SRB-SU8EW-EDLZ9-TGH3S-8SGA Charles抓包工具 &#x2F;&#x2F; Charles Proxy LicenseRegistered Name: https://zhile.ioLicense Key: 48891cf209c6d32bf4 Sublime Textsublime text 4143 license keyMac 下使用Hex Fiend修改sublime_text二进制文件 Go to hexed.it Click “Open File” and choose your sublime_text.exe (DON’T FORGET TO BACKUP YOUR EXE FILE) Go to Search and in “Search for” put: 80 78 05 00 0F 94 C1 In Search Type select “Enable replace” and put: 80 78 05 00 0F 94 C1 Click “Find next” then “Replace” Do the same thing with: C6 40 05 01 48 85 C9 &#x3D;&gt; C6 40 05 01 48 85 C9 Click “Save as” then name it: sublime_text Copy your modified sublime_text.exe to directory Sublime Text codesign –remove-signature &#x2F;Applications&#x2F;Sublime\\ Text.app&#x2F; Sketch文件打不开解决办法，使用盗版有风险，经常使用的话建议支持一下正版。 1sudo codesign -f -s - /Applications/Sketch.app/Contents/MacOS/Sketch MacDown专为Mac打造的Markdown编辑器，体积小巧，运行速度快。 IINAMac上最好用的播放器。","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.chaisz.com/tags/macOS/"}]},{"title":"macOS开发环境搭建","slug":"macOS开发环境搭建","date":"2023-05-28T11:49:01.000Z","updated":"2023-05-28T09:29:28.522Z","comments":true,"path":"2023/05/28/macOS开发环境搭建/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/macOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"Homebrew 安装1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; nvm 安装1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash 使用1nvm -h pyenv 安装1brew install pyenv rbenv 安装1brew install rbenv ruby-build rbenv-vars","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.chaisz.com/tags/macOS/"}]},{"title":"macOS终端美化","slug":"macOS终端美化","date":"2023-05-28T11:48:22.000Z","updated":"2023-05-28T09:29:28.522Z","comments":true,"path":"2023/05/28/macOS终端美化/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/macOS%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/","excerpt":"","text":"随着官方版本的更新，在你看到这篇文章时，有些配置可能已经过时。请以官方文档为准。 安装 Oh My ZSH1sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 禁用自动更新 1zstyle &#x27;:omz:update&#x27; mode disabled 安装插件zsh-syntax-highlighting 克隆插件到本地1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 修改 ~/.zshrc 文件，添加插件1plugins=( [plugins...] zsh-syntax-highlighting) 使修改生效1source ~/.zshrc zsh-autosuggestions 克隆插件到本地1git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions 修改 ~/.zshrc 文件，添加插件1234plugins=( # other plugins... zsh-autosuggestions) 使修改生效1source ~/.zshrc sublime 修改 ~/.zshrc 文件，添加插件1plugins=(... sublime) 使修改生效1source ~/.zshrc powerlevel10k主题 克隆到本地 1git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k 修改主题配置 ~/.zshrc: 12ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs) # 配置左侧图标 下载字体文件MesloLGS NF Regular.ttfMesloLGS NF Bold.ttfMesloLGS NF Italic.ttfMesloLGS NF Bold Italic.ttf 双击下载好的文件完成安装 配置终端字体为MesloLGS NF 使主题修改生效, 在执行这个之前需要配置好字体。不然在powerlevel10k引导配置时，图标显示会乱码。 1source ~/.zshrc 修改终端配色iTerm2-Color-Schemes 克隆仓库到本地1git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git 导入iTerm2-Color-Schemes主题文件, Mac 终端选择 terminal 文件夹下的文件。 参考ohmyzshpowerlevel10kiTerm2-Color-Schemes10 个 Terminal 主题，让你的 macOS 终端更好看","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.chaisz.com/tags/macOS/"}]},{"title":"macOS系统降级","slug":"macOS系统降级","date":"2023-05-28T11:47:37.000Z","updated":"2023-05-28T09:29:28.522Z","comments":true,"path":"2023/05/28/macOS系统降级/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/macOS%E7%B3%BB%E7%BB%9F%E9%99%8D%E7%BA%A7/","excerpt":"","text":"macOS系统下载 macOS Ventura macOS Monterey macOS Big Sur macOS Catalina macOS Mojave macOS High Sierra macOS 系统安装盘制作 Ventura 1sudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume Monterey 1sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume Big Sur 1sudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume Catalina 1sudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume Mojave 1sudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume High Sierra 1sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume 参考如何下载 macOS创建可引导的 macOS 安装器","categories":[],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.chaisz.com/tags/macOS/"}]},{"title":"在不受支持的Mac上安装macOS Ventura","slug":"在不受支持的Mac上安装macOS-Ventura","date":"2023-05-28T11:45:02.000Z","updated":"2023-05-28T09:29:28.526Z","comments":true,"path":"2023/05/28/在不受支持的Mac上安装macOS-Ventura/","link":"","permalink":"https://blog.chaisz.com/2023/05/28/%E5%9C%A8%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84Mac%E4%B8%8A%E5%AE%89%E8%A3%85macOS-Ventura/","excerpt":"","text":"使用OpenCore-Legacy-Patcher在MacBookPro2016安装macOS VenturaOpenCore 是一个复杂的引导加载程序，可以用来做黑苹果的启动引导。也可以使用它在旧Mac上安装新系统。更多信息请查看官方文档 系统安装盘制作如图所示，选择 Create macOS Installer 然后按照引导选择制作macOS安装盘。 安装系统安装盘制作完成后会引导你重新启动。重启后按Option键，选择从U盘启动。然后就可以安装macOS Ventura了。在安装过程中会重新启动多次，请耐心等待。注意系统安装完成前不要拔掉U盘。 安装补丁到这一步已经进入系统了。只是还有些驱动不太正常。比如说闪屏，睡眠无法唤醒等。我们需要安装补丁，按下图选择完成操作。 安装引导我们还需要最后一步，安装引导。这样拔掉U盘后也能正常进入系统。选择下边的选项完成安装。 自定义设置，如果想要无感知的进入系统。可以把 Show OpenCore Boot Picker 这个选项关掉。然后再重新安装引导。上边的Target Model可以根据自己的机型选择。如不知道该选哪个可以查看这个文档","categories":[{"name":"系统安装","slug":"系统安装","permalink":"https://blog.chaisz.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://blog.chaisz.com/tags/macOS/"}]},{"title":"图","slug":"图","date":"2022-11-30T16:53:17.000Z","updated":"2023-05-28T09:29:28.526Z","comments":true,"path":"2022/11/30/图/","link":"","permalink":"https://blog.chaisz.com/2022/11/30/%E5%9B%BE/","excerpt":"","text":"","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"图","slug":"图","permalink":"https://blog.chaisz.com/tags/%E5%9B%BE/"}]},{"title":"树","slug":"树","date":"2022-11-30T16:53:11.000Z","updated":"2023-05-28T09:29:28.534Z","comments":true,"path":"2022/11/30/树/","link":"","permalink":"https://blog.chaisz.com/2022/11/30/%E6%A0%91/","excerpt":"","text":"","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"树","slug":"树","permalink":"https://blog.chaisz.com/tags/%E6%A0%91/"},{"name":"二叉树","slug":"二叉树","permalink":"https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"二叉排序树","slug":"二叉排序树","permalink":"https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"},{"name":"二叉平衡树","slug":"二叉平衡树","permalink":"https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91/"},{"name":"红黑树","slug":"红黑树","permalink":"https://blog.chaisz.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"},{"name":"B+树","slug":"B-树","permalink":"https://blog.chaisz.com/tags/B-%E6%A0%91/"}]},{"title":"队列","slug":"队列","date":"2022-11-30T16:52:45.000Z","updated":"2023-05-28T09:29:28.534Z","comments":true,"path":"2022/11/30/队列/","link":"","permalink":"https://blog.chaisz.com/2022/11/30/%E9%98%9F%E5%88%97/","excerpt":"","text":"","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"队列","slug":"队列","permalink":"https://blog.chaisz.com/tags/%E9%98%9F%E5%88%97/"}]},{"title":"栈","slug":"栈","date":"2022-11-30T16:52:26.000Z","updated":"2023-05-28T09:29:28.534Z","comments":true,"path":"2022/11/30/栈/","link":"","permalink":"https://blog.chaisz.com/2022/11/30/%E6%A0%88/","excerpt":"","text":"","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"栈","slug":"栈","permalink":"https://blog.chaisz.com/tags/%E6%A0%88/"}]},{"title":"线性表","slug":"线性表","date":"2022-11-30T16:52:07.000Z","updated":"2023-05-28T09:29:28.534Z","comments":true,"path":"2022/11/30/线性表/","link":"","permalink":"https://blog.chaisz.com/2022/11/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/","excerpt":"","text":"线性表定义线性表是一种线性数据结构，其特点是数据元素之间存在“一对一”的关系。在一个线性表中每个数据元素的类型都是相通的，即线性表是由同一类型的数据元素构成的线性结构。","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数组","slug":"数组","permalink":"https://blog.chaisz.com/tags/%E6%95%B0%E7%BB%84/"},{"name":"链表","slug":"链表","permalink":"https://blog.chaisz.com/tags/%E9%93%BE%E8%A1%A8/"},{"name":"双向链表","slug":"双向链表","permalink":"https://blog.chaisz.com/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"},{"name":"循环链表","slug":"循环链表","permalink":"https://blog.chaisz.com/tags/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"},{"name":"哈希表","slug":"哈希表","permalink":"https://blog.chaisz.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]}],"categories":[{"name":"系统安装","slug":"系统安装","permalink":"https://blog.chaisz.com/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"name":"数据结构","slug":"数据结构","permalink":"https://blog.chaisz.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.chaisz.com/tags/iOS/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.chaisz.com/tags/Docker/"},{"name":"macOS","slug":"macOS","permalink":"https://blog.chaisz.com/tags/macOS/"},{"name":"图","slug":"图","permalink":"https://blog.chaisz.com/tags/%E5%9B%BE/"},{"name":"树","slug":"树","permalink":"https://blog.chaisz.com/tags/%E6%A0%91/"},{"name":"二叉树","slug":"二叉树","permalink":"https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"二叉排序树","slug":"二叉排序树","permalink":"https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"},{"name":"二叉平衡树","slug":"二叉平衡树","permalink":"https://blog.chaisz.com/tags/%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91/"},{"name":"红黑树","slug":"红黑树","permalink":"https://blog.chaisz.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"},{"name":"B+树","slug":"B-树","permalink":"https://blog.chaisz.com/tags/B-%E6%A0%91/"},{"name":"队列","slug":"队列","permalink":"https://blog.chaisz.com/tags/%E9%98%9F%E5%88%97/"},{"name":"栈","slug":"栈","permalink":"https://blog.chaisz.com/tags/%E6%A0%88/"},{"name":"数组","slug":"数组","permalink":"https://blog.chaisz.com/tags/%E6%95%B0%E7%BB%84/"},{"name":"链表","slug":"链表","permalink":"https://blog.chaisz.com/tags/%E9%93%BE%E8%A1%A8/"},{"name":"双向链表","slug":"双向链表","permalink":"https://blog.chaisz.com/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"},{"name":"循环链表","slug":"循环链表","permalink":"https://blog.chaisz.com/tags/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"},{"name":"哈希表","slug":"哈希表","permalink":"https://blog.chaisz.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]}